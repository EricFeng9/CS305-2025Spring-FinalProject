import json, time, threading
from utils import generate_message_id

known_peers = {}        # { peer_id: (ip, port) }
peer_flags = {}         # { peer_id: { 'nat': True/False, 'light': True/False } }
reachable_by = {}

def handle_hello_message(msg, self_id):
    # TODO: Add new peers to the list of known peers in known_peers.
    # TODO: Record the flags of known peers in peer_flags.
    # TODO: Update the set of reachable peers in reachable_by.

    return new_peers

def start_peer_discovery(self_id, self_info, send_func):
    def loop():
        # TODO: Define the JSON format of a “hello” message, which should include: {message type, sender’s alias, IP address, port, flags, and message ID}. 
        # A sender’s alias can be “peer_port”. 
        # The flags should indicate whether the peer is NATed or non-NATed, and full or lightweight. 
        # The message ID can be a random number generated by the function "generate_message_id" in utils.py.

        # TODO: Send a “hello” message to all known peers and put the messages into the outbox queue.
        pass
    threading.Thread(target=loop, daemon=True).start()
