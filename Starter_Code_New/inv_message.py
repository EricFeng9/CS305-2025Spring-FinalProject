import time
import json
from utils import generate_message_id
from outbox import gossip_message
from block_handler import received_blocks
from peer_discovery import known_peers

def create_inv(sender_id, block_ids):
    # TODO: * Define the JSON format of an `INV` message, which should include `{message type, sender's ID, sending blocks' IDs, message ID}`.
    # Note that `INV` messages are sent before sending blocks. 
    # `sending blocks' IDs` is the ID of blocks that the sender want to send. 
    # `message ID` can be a random number generated by `generate_message_id` in `util.py`.
    inv_msg={
        "type": "INV",
        "sender_id": sender_id,
        "block_ids": block_ids,
        "message_id": generate_message_id(sender_id)
    }
    return inv_msg

def get_inventory():
    # TODO: Return the block ID of all blocks in the local blockchain.
    block_ids = [block["block_id"] for block in received_blocks]
    return block_ids

def broadcast_inventory(self_id):
    # TODO: Create an `INV` message with all block IDs in the local blockchain.
    block_ids = get_inventory()
    inv_msg = create_inv(self_id, block_ids)
    # TODO: Broadcast the `INV` message to known peers using the function `gossip_message` in `outbox.py` to synchronize the blockchain with known peers.
    for peer_id in known_peers.keys():
        if peer_id != self_id:
            ip, port = known_peers[peer_id]
            gossip_message(self_id, ip, port, inv_msg)


